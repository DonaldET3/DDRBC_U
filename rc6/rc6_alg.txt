RC6 algorithm

Multi-byte words are interpreted as little-endian.


key schedule_
T = (2 * rounds) + 4
L = array of key words
C = length of L
S = array of T round key words
P = B7E15163
Q = 9E3779B9

S[0] = P

for i = 1 to T - 1 do
 S[i] = S[i - 1] + Q

A = B = i = j = 0

if C > T
 v = 3 * C
else
 v = 3 * T

for k = 1 to v do
 A = S[i] = (S[i] + A + B) <<< 3
 B = L[j] = (L[j] + A + B) <<< (A + B)
 i = (i + 1) mod T
 j = (j + 1) mod C


encrypt_
A, B, C, D = block words
R = number of rounds
S = 2R + 4 round keys
W = word width

B += S[0]
D += S[1]

for i = 1 to R do
 t = (B * (2B + 1)) <<< log2(W)
 u = (D * (2D + 1)) <<< log2(W)
 A = ((A XOR t) <<< u) + S[2i]
 C = ((C XOR u) <<< t) + S[2i + 1]
 (A, B, C, D) = (B, C, D, A)

A += S[(2 * R) + 2]
C += S[(2 * R) + 3]


decrypt_

C -= S[(2 * R) + 3]
A -= S[(2 * R) + 2]

for i = R to 1 do
 (A, B, C, D) = (D, A, B, C)
 u = (D * (2D + 1)) <<< log2(W)
 t = (B * (2B + 1)) <<< log2(W)
 C = ((C - S[2i + 1]) >>> t) XOR u
 A = ((A - S[2i]) >>> u) XOR t

D -= S[1]
B -= S[0]
